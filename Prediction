# ---------------------------------------------------------------
# Prediction Script for MCMC Spatial Model (BYM2)
# ---------------------------------------------------------------
# This script is used for making predictions from the MCMC results 
# of the BYM2 spatial model. The predictions combine fixed effects, 
# random effects, and confidence intervals to generate the final 
# predicted outcomes, which are then summarized and stored in the 
# dataset for further analysis.
# ---------------------------------------------------------------

# -----------------------
# 1. Load the Results and Data
# -----------------------
# Load the results from the MCMC fitting process
results <- rw1_results  # Assuming this is the object that holds the MCMC results

# Load the dataset for predictions
data <- direct_estimates  # Assuming this dataset contains the relevant data

# ---------------------------------------------------------
# 2. Prepare Design Matrices for Predictions
# ---------------------------------------------------------
# Define the fixed effects formula (same as used during model fitting)
fixed_effects_formula <- ~ 1 + Year_std + Division + Cause + Year_std:Cause + Cause:Division

# Generate the model matrix for fixed effects (this is used for prediction)
X <- model.matrix(fixed_effects_formula, data = data)

# Define the spatial effects matrix using the adjacency matrix for the spatial model (BYM2)
# Here, we assume the spatial effect is based on district-level spatial structure
spatial_effects <- model.matrix(~ 0 + district, data = data)

# Store the spatial effects in a list (using BYM2 structure for district spatial effects)
Z_list <- list(
  spatial_bym2 = spatial_effects  # Assuming BYM2 spatial effect for districts
)

# Define random effects: RW2 effects for cause-district and cause-division interactions
random_effects <- list(
  rw2_dist = model.matrix(~ Cause * district, data = data),  # Random effects for cause and district
  rw2_div = model.matrix(~ Cause * division, data = data)    # Random effects for cause and division
)

# -----------------------------------------------------------
# 3. Predict Using MCMC Samples
# -----------------------------------------------------------
# Check if the MCMC results object contains fixed effects
if (is.null(results$fixed_effects)) {
  stop("results$fixed_effects is not available in the MCMC results. Please check the output of the MCMC fitting process.")
}

# Extract the first matrix of fixed effects (samples from the MCMC chain)
fixed_effects_samples <- results$fixed_effects[[1]]

# Ensure the structure of random effects matches the structure of the MCMC results
# This step aligns the random effects with the model parameters
for (r in names(Z_list)) {
  matching_indices <- match(colnames(Z_list[[r]]), attr(results[[r]][[1]], "labels"))
  results[[r]][[1]] <- results[[r]][[1]][, matching_indices, drop = FALSE]
  results[[r]][[2]] <- results[[r]][[2]] <- results[[r]][[2]][, matching_indices, drop = FALSE]
}

# Initialize a matrix to store the detailed predictions for each MCMC sample
detailed_preds <- matrix(0, nrow = nrow(data), ncol = nrow(fixed_effects_samples))  # One column per sample

# Loop over each MCMC sample to calculate predictions
for (s in 1:nrow(fixed_effects_samples)) {
  
  # Calculate fixed effects predictions using the model matrix for fixed effects
  fixed_pred <- X %*% fixed_effects_samples[s, ]  # Fixed effect prediction for sample 's'
  
  # Calculate random effects predictions (using RW2 and BYM2 effects)
  random_pred <- Reduce(`+`, lapply(names(Z_list), function(r) {
    Z_r <- Z_list[[r]]
    results_r1 <- results[[r]][[1]][s, ]
    results_r2 <- results[[r]][[2]][s, ]
    
    # Combine random effects predictions
    pred1 <- Z_r %*% results_r1
    pred2 <- Z_r %*% results_r2
    pred1 + pred2
  }))
  
  # Combine both fixed and random effects predictions
  detailed_preds[, s] <- fixed_pred + random_pred
}

# --------------------------------------------------------------
# 4. Compute Summary Statistics for Predictions
# --------------------------------------------------------------
# Calculate the mean prediction across all MCMC samples for each observation
trend_means <- rowMeans(detailed_preds)  # Mean of all MCMC samples for each observation

# Calculate the standard deviation of predictions across all MCMC samples
trend_sds <- apply(detailed_preds, 1, sd)  # Standard deviation for each observation

# --------------------------------------------------------------
# 5. Compute Confidence Intervals for Predictions (95% CI)
# --------------------------------------------------------------
# Define alpha for 95% confidence interval (i.e., 5% for two-tailed CI)
alpha <- 0.05

# Calculate the lower bound of the 95% CI (2.5% quantile)
pred_ci_lower <- apply(detailed_preds, 1, function(x) quantile(x, probs = alpha / 2, na.rm = TRUE))

# Calculate the upper bound of the 95% CI (97.5% quantile)
pred_ci_upper <- apply(detailed_preds, 1, function(x) quantile(x, probs = 1 - alpha / 2, na.rm = TRUE))

# --------------------------------------------------------------
# 6. Combine and Display Prediction Summary
# --------------------------------------------------------------
# Create a summary data frame that contains mean predictions, SD, and confidence intervals
pred_summary <- data.frame(
  mean = trend_means,
  sd = trend_sds,
  lower_ci = pred_ci_lower,
  upper_ci = pred_ci_upper
)

# If the predictions were log-transformed before fitting, inverse the transformation for predictions
data$pred_mean <- exp(pred_summary$mean)
data$pred_sd <- pred_summary$sd  # Standard deviation usually doesn't require transformation
data$lower_ci <- exp(pred_summary$lower_ci)
data$upper_ci <- exp(pred_summary$upper_ci)

# Preview the updated predictions with confidence intervals
cat("Preview of updated predictions:\n")
head(data[, c("pred_mean", "pred_sd", "lower_ci", "upper_ci")])

# ---------------------------------------------------------------
# End of Prediction Script
# ---------------------------------------------------------------
# This script:
# 1. Prepares design matrices for fixed effects, spatial effects, and random effects.
# 2. Uses MCMC samples to make predictions by combining fixed and random effects.
# 3. Computes summary statistics for predictions, including mean, standard deviation, and confidence intervals.
# 4. Optionally transforms the predictions back if they were log-transformed before fitting.
#
# The results are stored in the 'data' object, which includes predicted means, standard deviations, and confidence intervals.
# ---------------------------------------------------------------
