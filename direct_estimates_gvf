# ---------------------------------------------------------------
# Main Functionality of the Script
# ---------------------------------------------------------------
# 
# This script processes and analyzes survey data to compute direct estimates
# for various causes of death using survey weights and stratification.
# The script covers the following key functionalities:
#
# 1. **Survey Analysis**: 
#    - Handles complex survey design features such as weights, strata, and clusters.
#    - Computes estimates for different causes of death, including the variance of the estimates.
#
# 2. **Smoothing and Prediction**: 
#    - Applies smoothing techniques to adjust the responses and sample sizes.
#    - Uses a Generalized Variance Function (GVF) model to predict standard errors.
#
# 3. **Data Imputation**: 
#    - Replaces missing values in the responses with division-level means to ensure completeness.
#
# The script is designed to work with survey data and applies various statistical methods
# to provide accurate estimates and predictions for causes of death.
# ---------------------------------------------------------------
# ---------------------------------------------------------------
# Analysis and Prediction of Direct Estimates for Causes of Death
# ---------------------------------------------------------------
# This script processes and analyzes survey data to compute direct estimates 
# for various causes of death using survey weights and stratification. 
# It includes steps for calculating weighted and unweighted sample sizes, 
# merging direct estimates, smoothing responses, and applying a Generalized 
# Variance Function (GVF) model to predict standard errors.
# ---------------------------------------------------------------

# ----------------------
# 1. Load Necessary Libraries
# ----------------------
library(survey)
library(dplyr)

# -----------------------------------------
# 2. Select Relevant Columns and Merge Data
# -----------------------------------------
# Select columns needed for analysis
data <- merged_data[, c("cause_of_death", "v005_scaled", "v021", "v022", "qncluster", "v101", "v007")]

# Join spatial data (assuming geo is an sf object)
data <- st_join(data, geo)

# -----------------------------------------
# 3. Filter Data for Selected Causes of Death
# -----------------------------------------
# Define causes of death to analyze
selected_causes <- c("birth asphyxia", "drowning", "pneumonia", "possible serious infections", "pre term birth")

# Filter data for selected causes
data <- data %>% 
  filter(cause_of_death %in% selected_causes)

# ----------------------------------------
# 4. Convert v101 to Division and Map Survey Years
# ----------------------------------------
# Convert Division to a factor and remove v101 if no longer needed
data <- data %>%
  mutate(Division = as_factor(v101)) %>%
  select(-v101)

# Map survey years to a time index
data <- data %>%
  mutate(Time_Index = case_when(
    v007 == 2004 ~ 1,
    v007 == 2011 ~ 2,
    v007 == 2017 ~ 3,
    v007 == 2022 ~ 4
  ))

# Adjust for single-PSU strata
options(survey.lonely.psu = "adjust")

# ----------------------------
# 5. Create Survey Design Object
# ----------------------------
# Create survey design object using weights, strata, and clusters
DHS.design <- svydesign(
  ids = ~qncluster,
  weights = ~v005_scaled,
  strata = ~v022,
  data = data,
  nest = TRUE
)

# --------------------------------------
# 6. Calculate Direct Estimates for Causes
# --------------------------------------
# Initialize list to store direct estimates for each cause
direct_estimates_list <- list()

# Loop through selected causes and calculate direct estimates
for (cause in selected_causes) {
  # Create binary response variable for the cause of death
  data$cause_response <- as.integer(data$cause_of_death == cause)
  
  # Recalculate survey design with updated response variable
  DHS.design <- svydesign(
    ids = ~qncluster,
    weights = ~v005_scaled,
    strata = ~v022,
    data = data,
    nest = TRUE
  )
  
  # Calculate direct estimates by AREA_NAME, Year, and Division
  de <- svyby(
    ~cause_response,
    by = ~AREA_NAME + v007,
    design = DHS.design,
    svymean,
    vartype = c("se"),
    keep.var = TRUE
  )
  
  # Add cause information to the estimates
  de$cause <- cause
  
  # Store the estimates in the list
  direct_estimates_list[[cause]] <- de
}

# ----------------------------------------
# 7. Combine Results for All Causes
# ----------------------------------------
# Combine direct estimates from all causes into a single dataframe
direct_estimates <- do.call(rbind, direct_estimates_list)
direct_estimates <- data.frame(direct_estimates)

# ----------------------------------------------
# 8. Rename and Clean the Final Data
# ----------------------------------------------
# Rename columns and calculate variance for estimates
direct_estimates <- direct_estimates %>%
  rename(
    AREA_NAME = AREA_NAME,
    Year = v007,
    Response = cause_response,
    Standard_Error = se,
    Cause = cause
  ) %>%
  mutate(Variance = Standard_Error^2)

# -----------------------------------------
# 9. Add Missing Estimates with Full Grid
# -----------------------------------------
# Generate a full grid of all combinations of area, year, and cause
area_names <- unique(geo$AREA_NAME)
years <- c(2004, 2011, 2017, 2022)
full_grid <- expand.grid(AREA_NAME = area_names, Year = years, Cause = selected_causes)

# Merge the full grid with direct estimates to ensure all combinations are included
direct_estimates <- merge(
  full_grid, 
  direct_estimates, 
  by = c("AREA_NAME", "Year", "Cause"), 
  all.x = TRUE
)

# --------------------------
# 10. Calculate Sample Sizes
# --------------------------
# Create an indicator for unweighted sample size calculation
data <- data %>% mutate(indicator = 1)

# Recreate the survey design object
DHS.design <- svydesign(
  ids = ~qncluster,
  weights = ~v005_scaled,
  strata = ~v022,
  data = data,
  nest = TRUE
)

# Calculate unweighted sample size
sample_size_unweighted <- svyby(
  ~indicator, 
  by = ~AREA_NAME + v007 + cause_of_death, 
  design = DHS.design, 
  svytotal
) %>%
  rename(Sample_Size = indicator)

# Calculate weighted sample size
sample_size_weighted <- svyby(
  ~v005_scaled, 
  by = ~AREA_NAME + v007 + cause_of_death, 
  design = DHS.design, 
  svytotal
) %>%
  rename(Sample_Size_Weighted = v005_scaled)

# -------------------------------------------
# 11. Merge Sample Sizes with Direct Estimates
# -------------------------------------------
# Merge sample sizes (both unweighted and weighted) into the direct estimates dataframe
direct_estimates <- direct_estimates %>%
  left_join(sample_size_unweighted[, c("AREA_NAME", "Year", "Cause", "Sample_Size")], by = c("AREA_NAME", "Year", "Cause")) %>%
  left_join(sample_size_weighted[, c("AREA_NAME", "Year", "Cause", "Sample_Size_Weighted")], by = c("AREA_NAME", "Year", "Cause"))

# --------------------------------------
# 12. Add Division Column from Data
# --------------------------------------
# Add Division information from the original data using AREA_NAME
direct_estimates <- direct_estimates %>%
  left_join(data %>% distinct(AREA_NAME, Division), by = "AREA_NAME")

# -------------------------------------------
# 13. Compute Division and National Means
# -------------------------------------------
# Calculate division-level means for each cause and year
division_means <- direct_estimates %>%
  group_by(Division, Year, Cause) %>%
  summarise(
    Division_Mean_Response = mean(Response, na.rm = TRUE),
    Division_Mean_Sample_Size = mean(Sample_Size, na.rm = TRUE),
    .groups = "drop"
  )

# Calculate national means as a fallback
national_means <- direct_estimates %>%
  group_by(Year, Cause) %>%
  summarise(
    National_Mean_Response = mean(Response, na.rm = TRUE),
    National_Mean_Sample_Size = mean(Sample_Size, na.rm = TRUE),
    .groups = "drop"
  )

# Merge division means with national means for fallback
division_means <- division_means %>%
  left_join(national_means, by = c("Year", "Cause")) %>%
  mutate(
    Division_Mean_Response = ifelse(is.na(Division_Mean_Response) | Division_Mean_Response == 0, National_Mean_Response, Division_Mean_Response),
    Division_Mean_Sample_Size = ifelse(is.na(Division_Mean_Sample_Size) | Division_Mean_Sample_Size == 0, National_Mean_Sample_Size, Division_Mean_Sample_Size)
  )

# ---------------------------------------------
# 14. Replace Missing Values and Smooth Responses
# ---------------------------------------------
# Replace missing or zero values in Response and Sample_Size with division means
direct_estimates <- direct_estimates %>%
  mutate(
    Response = ifelse(is.na(Sample_Size) | Response %in% c(0, 1), Division_Mean_Response, Response),
    Sample_Size = ifelse(is.na(Sample_Size), Division_Mean_Sample_Size, Sample_Size)
  )

# -----------------------------------------------
# 15. Compute Smoothed Responses and Sample Sizes
# -----------------------------------------------
# Apply weight factor to smooth the response and sample size
direct_estimates <- direct_estimates %>%
  mutate(
    Weight_Factor = Sample_Size / (Sample_Size + 1),
    Smooth_Response = Weight_Factor * Response + (1 - Weight_Factor) * Division_Mean_Response,
    Smooth_Sample_Size = Weight_Factor * Sample_Size + (1 - Weight_Factor) * Division_Mean_Sample_Size
  )

# ------------------------------------------
# 16. Apply GVF Model and Predict Standard Errors
# ------------------------------------------
# Filter data for GVF model
gvf_data <- direct_estimates %>%
  filter(!is.na(Smooth_Response) & !is.na(Smooth_Sample_Size) & !is.na(Standard_Error) & Standard_Error > 0)

# Fit the GVF model to predict standard errors
gvf_model <- lm(
  log(Standard_Error) ~ log(Smooth_Response) + log(Smooth_Sample_Size + 1) + Division + Cause,
  data = gvf_data
)

# Predict smoothed standard errors
direct_estimates <- direct_estimates %>%
  mutate(
    Predicted_Standard_Error = exp(predict(gvf_model, newdata = direct_estimates))
  )

# ------------------------------------------
# 17. Standardize Year for Analysis
# ------------------------------------------
# Standardize the Year variable for analysis
direct_estimates <- direct_estimates %>%
  mutate(
    year.s = (Year - mean(Year, na.rm = TRUE)) / sd(Year, na.rm = TRUE)
  )

# ----------------------------
# 18. Final Inspection
# ----------------------------
# Check the dimensions and summary of the updated dataset
dim(direct_estimates)
summary(direct_estimates)
